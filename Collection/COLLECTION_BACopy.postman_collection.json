{
	"info": {
		"_postman_id": "a24dc290-d4b9-4a00-8b7d-8ef036450f61",
		"name": "COLLECTION_BACopy",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "39866532"
	},
	"item": [
		{
			"name": "Create New User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"// Positive Scenario\r",
							"//To validate the request is successful\r",
							"pm.test(\"Successful POST request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
							"});\r",
							"\r",
							"// Positive Scenario\r",
							"//To check if id is successfully auto generated \r",
							"pm.test(\"Response has ID key\", function() {\r",
							"      pm.expect(pm.response.json()).to.have.property('id') ;\r",
							"});\r",
							"\r",
							"// Positive Scenario\r",
							"//To check if id is null\r",
							"pm.test(\"ID value is null\", function() {\r",
							"  const jsonData = pm.response.json(); \r",
							"  pm.expect(jsonData.id).to.not.equal(null); \r",
							"});\r",
							"\r",
							"//Positive Scenario\r",
							"//To check if status is a string with valid values\r",
							"pm.test(\"Response has status field\", function() {\r",
							"      pm.expect(pm.response.json()).to.have.property('status').that.is.a('string');\r",
							"      pm.expect(pm.response.json().status).to.be.oneOf(['active', 'inactive']); // Added validation for status to be either active or inactive\r",
							"});\r",
							"\r",
							"\r",
							"// Negative Scenario\r",
							"//To validate the request failed\r",
							"pm.test(\"Failed POST request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([400, 404,422]);\r",
							"});\r",
							"\r",
							"//To create variables of response property\r",
							"\r",
							"pm.collectionVariables.set('id', pm.response.json().id);\r",
							"console.log(pm.collectionVariables.get('id'));\r",
							"\r",
							"pm.collectionVariables.set('name', pm.response.json().name);\r",
							"console.log(pm.collectionVariables.get('name'));\r",
							"\r",
							"pm.collectionVariables.set('email', pm.response.json().email);\r",
							"console.log(pm.collectionVariables.get('email'));\r",
							"\r",
							"pm.collectionVariables.set('gender', pm.response.json().gender);\r",
							"console.log(pm.collectionVariables.get('gender'));\r",
							"\r",
							"pm.collectionVariables.set('status', pm.response.json().status);\r",
							"console.log(pm.collectionVariables.get('status'));\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Negative Scenarios\r",
							"// To check if fields are blank\r",
							"\r",
							"var req = JSON.parse(pm.request.body);\r",
							"pm.test(\"Email is undefined or blank\"  , function () {\r",
							"    pm.expect(req.email, 'Email is  undefined or blank').to.equal(undefined);\r",
							"});\r",
							"\r",
							"pm.test(\"Name is undefined or blank\"  , function () {\r",
							"    pm.expect(req.name, 'Name is  undefined or blank').to.equal(undefined);\r",
							"});\r",
							"\r",
							"pm.test(\"Gender is undefined or blank\"  , function () {\r",
							"    pm.expect(req.gender, 'Gender is  undefined or blank').to.equal(undefined);\r",
							"});\r",
							"\r",
							"pm.test(\"Status is undefined or blank\"  , function () {\r",
							"    pm.expect(req.status, 'Status is  undefined or blank').to.equal(undefined);\r",
							"});\r",
							"\r",
							"// Positive Scenarios\r",
							"// To check if fields have valid values\r",
							"\r",
							"pm.test(\"Status is string\"  , function () {\r",
							"    pm.expect(req.status, 'Status is  string').to.be.a('string');\r",
							"});\r",
							"\r",
							"pm.test(\"Status is either active or inactive\"  , function () {\r",
							"    pm.expect(req.status, 'Status is either active or inactive').to.be.oneOf([\"active\", \"inactive\"]);\r",
							"});\r",
							"\r",
							"pm.test(\"Email is valid\"  , function () {\r",
							"    pm.expect(req.email, 'Email is valid').to.include(\"@\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{AuthToken}}",
						"type": "text"
					},
					{
						"key": "",
						"value": "",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": " {\r\n         \"name\": \"USER2DEC12\",\r\n    \"email\": \"USER2DEC12@shanahan.test\",\r\n    \"gender\": \"male\",\r\n    \"status\": \"active\"\r\n        \r\n    }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseURL}}",
					"host": [
						"{{BaseURL}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"// Positive Scenario\r",
							"//To validate the request is successful\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Positive Scenario\r",
							"//To check the response data  matches the data from post request\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Id from response data matches post data\", function () {\r",
							"    pm.expect(jsonData[0][\"id\"]).to.equal(pm.collectionVariables.get(\"id\"));\r",
							"});\r",
							"pm.test(\"Name from response data matches post data\", function () {\r",
							"    pm.expect(jsonData[0][\"name\"]).to.equal(pm.collectionVariables.get(\"name\"));\r",
							"});\r",
							"pm.test(\"Email from response data matches post data\", function () {\r",
							"    pm.expect(jsonData[0][\"email\"]).to.equal(pm.collectionVariables.get(\"email\"));\r",
							"});\r",
							"pm.test(\"Gender from response data matches post data\", function () {\r",
							"    pm.expect(jsonData[0][\"gender\"]).to.equal(pm.collectionVariables.get(\"gender\"));\r",
							"});\r",
							"pm.test(\"Status from response data matches post data\", function () {\r",
							"    pm.expect(jsonData[0][\"status\"]).to.equal(pm.collectionVariables.get(\"status\"));\r",
							"});\r",
							"\r",
							"// Negative Scenario\r",
							"//To check the response data doesnot match the data from post request\r",
							"\r",
							"pm.test(\"Id from response data does not match post data\", function () {\r",
							"    pm.expect(jsonData[0][\"id\"]).to.not.equal(pm.collectionVariables.get(\"id\"));\r",
							"});\r",
							"pm.test(\"Name from response data  does not match post data\", function () {\r",
							"    pm.expect(jsonData[0][\"name\"]).to.not.equal(pm.collectionVariables.get(\"name\"));\r",
							"});\r",
							"pm.test(\"Email from response data  does not match post data\", function () {\r",
							"    pm.expect(jsonData[0][\"email\"]).to.not.equal(pm.collectionVariables.get(\"email\"));\r",
							"});\r",
							"pm.test(\"Gender from response data  does not match post data\", function () {\r",
							"    pm.expect(jsonData[0][\"gender\"]).to.not.equal(pm.collectionVariables.get(\"gender\"));\r",
							"});\r",
							"pm.test(\"Status from response data  does not match post data\", function () {\r",
							"    pm.expect(jsonData[0][\"status\"]).to.not.equal(pm.collectionVariables.get(\"status\"));\r",
							"});\r",
							"\r",
							"\r",
							"if(pm.response.code===200 )  {pm.execution.setNextRequest(\"Update User\");\r",
							"}else{pm.execution.setNextRequest(null);}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{AuthToken}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{BaseURL}}",
					"host": [
						"{{BaseURL}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"//Positive Scenario\r",
							"//To validate the request is successful\r",
							"\r",
							"pm.test(\"Successful PUT request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);\r",
							"});\r",
							"\r",
							"//To create variables of response property\r",
							"\r",
							"pm.collectionVariables.set('id1', pm.response.json().id);\r",
							"console.log(pm.collectionVariables.get('id'));\r",
							"\r",
							"pm.collectionVariables.set('name1', pm.response.json().name);\r",
							"console.log(pm.collectionVariables.get('name'));\r",
							"\r",
							"pm.collectionVariables.set('email1', pm.response.json().email);\r",
							"console.log(pm.collectionVariables.get('email'));\r",
							"\r",
							"pm.collectionVariables.set('gender1', pm.response.json().gender);\r",
							"console.log(pm.collectionVariables.get('gender'));\r",
							"\r",
							"pm.collectionVariables.set('status1', pm.response.json().status);\r",
							"console.log(pm.collectionVariables.get('status'));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "\t{\r\n     \"name\": \"USER2DEC12ED\",\r\n    \"email\": \"USER2DEC12ED@shanahan.test\",\r\n    \"gender\": \"female\",\r\n    \"status\": \"inactive\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseURL}}/{{id}}",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User after update",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"//Positive Scenario\r",
							"//To validate the request is successful\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Negative Scenario\r",
							"//To validate the user is successfully updated and response data does not match the original data\r",
							"\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Id from response data\", function () {\r",
							"    pm.expect(jsonData[\"id\"]).to.equal(pm.collectionVariables.get(\"id\"));\r",
							"});\r",
							"pm.test(\"Name from response data  does not match the original data\", function () {\r",
							"    pm.expect(jsonData[\"name\"]).to.not.equal(pm.collectionVariables.get(\"name\"));\r",
							"});\r",
							"pm.test(\"Email from response data  does not match the original data\", function () {\r",
							"    pm.expect(jsonData[\"email\"]).to.not.equal(pm.collectionVariables.get(\"email\"));\r",
							"});\r",
							"pm.test(\"Gender from response data  does not match the original data\", function () {\r",
							"    pm.expect(jsonData[\"gender\"]).to.not.equal(pm.collectionVariables.get(\"gender\"));\r",
							"});\r",
							"pm.test(\"Status from response data  does not match the original data\", function () {\r",
							"    pm.expect(jsonData[\"status\"]).to.not.equal(pm.collectionVariables.get(\"status\"));\r",
							"});\r",
							"\r",
							"//Positive Scenario\r",
							"//To validate the user is successfully updated and response data matches the updated data\r",
							"\r",
							"pm.test(\"Id from response data matches the updated data\", function () {\r",
							"    pm.expect(jsonData[\"id\"]) .to.equal(pm.collectionVariables.get(\"id1\"));\r",
							"});\r",
							"pm.test(\"Name from response data matches the updated data\", function () {\r",
							"    pm.expect(jsonData[\"name\"]).to.equal(pm.collectionVariables.get(\"name1\"));\r",
							"});\r",
							"pm.test(\"Email from response data matches the updated data\", function () {\r",
							"    pm.expect(jsonData[\"email\"]).to.equal(pm.collectionVariables.get(\"email1\"));\r",
							"});\r",
							"pm.test(\"Gender from response data matches the updated data\", function () {\r",
							"    pm.expect(jsonData[\"gender\"]).to.equal(pm.collectionVariables.get(\"gender1\"));\r",
							"});\r",
							"pm.test(\"Status from response data matches the updated data\", function () {\r",
							"    pm.expect(jsonData[\"status\"]).to.equal(pm.collectionVariables.get(\"status1\"));\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{AuthToken}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{BaseURL}}/{{id}}",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//To validate the request is successful\r",
							"\r",
							"pm.test(\"Successful DELETE request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);\r",
							"});\r",
							"\r",
							"//To validate the user is successfully deleted \r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{BaseURL}}/{{id}}",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Request after user delete",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Positive Scenario\r",
							"//To validate the request is successful\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"//Negative Scenario\r",
							"//To validate the user is successfully deleted and id doesnot exist in the response body\r",
							"pm.test(\"Response data does not have the deleted user id\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"id\"));\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{AuthToken}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{BaseURL}}/",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						""
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{AuthToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "AuthToken",
			"value": "7c0e67ce81a8ff519e7295d49c666265fbbed021d5d465636bd6ec5374f1b6fc",
			"type": "string"
		},
		{
			"key": "BaseURL",
			"value": "https://gorest.co.in/public/v2/users",
			"type": "string"
		},
		{
			"key": "id",
			"value": ""
		},
		{
			"key": "name",
			"value": ""
		},
		{
			"key": "email",
			"value": ""
		},
		{
			"key": "gender",
			"value": ""
		},
		{
			"key": "status",
			"value": ""
		},
		{
			"key": "id1",
			"value": ""
		},
		{
			"key": "name1",
			"value": ""
		},
		{
			"key": "email1",
			"value": ""
		},
		{
			"key": "gender1",
			"value": ""
		},
		{
			"key": "status1",
			"value": ""
		}
	]
}